#' @return Print statement for the dataframe of trainer object with attributes
#' @export
print.trainer <- function(x) {
cat('POKEMON TRAINERS IN SINNOH\n')
trainer_as_df = data.frame('name' = attr(x,"name"), 'hometown' = attr(x, "hometown"),
'number of pokemon seen' = attr(x, "pokedex"), 'number of badges' = attr(x, "badges"))
names(trainer_as_df) = str_replace_all(names(trainer_as_df),pattern = "\\.", replacement = " ") # replace dots in dataframe headers with spaces
trainer_as_df = trainer_as_df %>% arrange(name)
print(trainer_as_df)
}
trainer(c('zz','Misty'))
dawn = trainer('Dawn', hometown = 'Twinleaf Town', pokedex = 80, badges = 5)1
ash = trainer('Ash', hometown = 'Pallet Town', pokedex = 100, badges = 8)
dawn = trainer('Dawn', hometown = 'Twinleaf Town', pokedex = 80, badges = 5)
ash
c(ash,dawn)
ash
setwd('../Documents/WellDone/taarifa')
setwd('../WellDone/taarifa')
setwd('..')
setwd('Work/WellDone/taarifa/code')
library(dplyr)
library(stringr)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
training_values <- read.table('../data/training_set_roads.txt', sep = ",", header = TRUE, stringsAsFactors = FALSE, fill = TRUE, quote = "\"")
training_dist = training_values %>% select(id, NEAR_DIST)
training_dist = str_replace_all(training_dist, pattern = ",",replacement = "") # Remove commas to convert to integers
library(dplyr)
library(stringr)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
training_values <- read.table('../data/training_set_roads.txt', sep = ",", header = TRUE, stringsAsFactors = FALSE, fill = TRUE, quote = "\"")
training_dist = training_values %>% select(id, NEAR_DIST)
training_dist$id = str_replace_all(training_dist$id, pattern = ",",replacement = "") # Remove commas to convert to integers
training_dist$NEAR_DIST = str_replace_all(training_dist$NEAR_DIST, pattern = ",", replacement = "")
View(training_dist)
training_dist$id = as.integer(training_dist$id)
str(training_dist)
training_dist$NEAR_DIST = as.float(training_dist$NEAR_DIST)
training_dist$NEAR_DIST = as.numeric(training_dist$NEAR_DIST)
training_dist$NEAR_DIST = round(as.numeric(training_dist$NEAR_DIST),2)
str(training_dist)
training_dist$NEAR_DIST = round(as.numeric(training_dist$NEAR_DIST),3)
str(training_dist)
write.csv(training_dist, '../data/cleaned_distances.csv')
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
dat_roads = read.csv('../data/cleaned_distances.csv')
dat1_with_roads <- full_join(dat1, dat_roads, by = "id")
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(id, quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
dat_roads = read.csv('../data/cleaned_distances.csv')
dat1_with_roads <- full_join(dat1, dat_roads, by = "id")
dat1_with_roads <- full_join(dat1, dat_roads, by = "id") %>% select(-id)
View(dat1_with_roads)
dat1_with_roads <- full_join(dat1, dat_roads, by = "id") %>% select(c(-id,-x))
dat1_with_roads <- full_join(dat1, dat_roads, by = "id")
library(dplyr)
library(stringr)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
training_values <- read.table('../data/training_set_roads.txt', sep = ",", header = TRUE, stringsAsFactors = FALSE, fill = TRUE, quote = "\"")
training_dist = training_values %>% select(id, NEAR_DIST)
training_dist$id = str_replace_all(training_dist$id, pattern = ",",replacement = "") # Remove commas to convert to numeric data types
training_dist$NEAR_DIST = str_replace_all(training_dist$NEAR_DIST, pattern = ",", replacement = "")
training_dist$id = as.integer(training_dist$id) # Convert to numeric data types
training_dist$NEAR_DIST = round(as.numeric(training_dist$NEAR_DIST),2)
str(training_dist)
write.csv(training_dist, '../data/cleaned_distances.csv')
View(training_labels)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(id, quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
dat_roads = read.csv('../data/cleaned_distances.csv')
View(dat_roads)
dat_roads = read.csv('../data/cleaned_distances.csv',row.names = FALSE)
dat_roads = read.csv('../data/cleaned_distances.csv') %>% select(id, NEAR_DIST)
dat1_with_roads <- full_join(dat1, dat_roads, by = 'id')
dat1_with_roads <- full_join(dat1, dat_roads, by = 'id') %>% select(-id)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(id, quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
# Merge roads dataset by ID, then remove id
dat_roads = read.csv('../data/cleaned_distances.csv') %>% select(id, NEAR_DIST)
dat1_with_roads <- full_join(dat1, dat_roads, by = 'id') %>% select(-id)
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, quality_group = Quality_group.1, management_group = Management, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group','quality_group','management_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
dat = bind_rows(dat1, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
View(dat)
View(dat1_with_roads)
median_road_distance = median(dat1_with_roads$NEAR_DIST)
dat2 %>% mutate(NEAR_DIST = median_road_distance)
dat2 = dat2 %>% mutate(NEAR_DIST = median_road_distance)
dat = bind_rows(dat1, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
summary(dat$NEAR_DIST)
dat1_with_roads$NEAR_DIST = as.integer(dat1_with_roads$NEAR_DIST)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(id, quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
# Merge roads dataset by ID, then remove id
dat_roads = read.csv('../data/cleaned_distances.csv') %>% select(id, NEAR_DIST)
dat1_with_roads <- full_join(dat1, dat_roads, by = 'id') %>% select(-id)
dat1_with_roads$NEAR_DIST = as.integer(dat1_with_roads$NEAR_DIST)
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, quality_group = Quality_group.1, management_group = Management, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group','quality_group','management_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
# Add median road distance from dat1 as distance to nearest road for dat2 as we don't have these values
median_road_distance = median(dat1_with_roads$NEAR_DIST)
dat2 = dat2 %>% mutate(NEAR_DIST = median_road_distance)
dat = bind_rows(dat1, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
View(dat1_with_roads)
summary(dat)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(id, quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
# Merge roads dataset by ID, then remove id
dat_roads = read.csv('../data/cleaned_distances.csv') %>% select(id, NEAR_DIST)
dat1_with_roads <- full_join(dat1, dat_roads, by = 'id') %>% select(-id)
dat1_with_roads$NEAR_DIST = as.numeric(dat1_with_roads$NEAR_DIST)
View(dat1_with_roads)
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, quality_group = Quality_group.1, management_group = Management, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group','quality_group','management_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
# Add median road distance from dat1 as distance to nearest road for dat2 as we don't have these values
median_road_distance = median(dat1_with_roads$NEAR_DIST)
dat2 = dat2 %>% mutate(NEAR_DIST = median_road_distance)
dat = bind_rows(dat1, dat2)
View(dat)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(id, quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
# Merge roads dataset by ID, then remove id
dat_roads = read.csv('../data/cleaned_distances.csv') %>% select(id, NEAR_DIST)
dat1_with_roads <- full_join(dat1, dat_roads, by = 'id') %>% select(-id)
dat1_with_roads$NEAR_DIST = as.numeric(dat1_with_roads$NEAR_DIST)
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, quality_group = Quality_group.1, management_group = Management, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group','quality_group','management_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
# Add median road distance from dat1 as distance to nearest road for dat2 as we don't have these values
median_road_distance = median(dat1_with_roads$NEAR_DIST)
dat2 = dat2 %>% mutate(NEAR_DIST = median_road_distance)
dat = bind_rows(dat1_with_roads, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
View(dat)
summary(dat$NEAR_DIST)
View(dat2)
# Add median road distance from dat1 as distance to nearest road for dat2 as we don't have these values
median_road_distance = median(dat1_with_roads$NEAR_DIST)
# Add median road distance from dat1 as distance to nearest road for dat2 as we don't have these values
median_road_distance = mean(dat1_with_roads$NEAR_DIST)
summary(dat1_with_roads$NEAR_DIST)
# Add median road distance from dat1 as distance to nearest road for dat2 as we don't have these values
median(dat1_with_roads$NEAR_DIST)
# Add median road distance from dat1 as distance to nearest road for dat2 as we don't have these values
median_road_distance = median(dat1_with_roads$NEAR_DIST, na.rm = TRUE)
dat2 = dat2 %>% mutate(NEAR_DIST = median_road_distance)
median_road_distance = median(dat1_with_roads$NEAR_DIST, na.rm = TRUE)
dat2 = dat2 %>% mutate(NEAR_DIST = median_road_distance)
dat1_with_roads$NEAR_DIST[is.na(dat1_with_roads$NEAR_DIST)] = median_road_distance
dat = bind_rows(dat1_with_roads, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
summary(dat$NEAR_DIST)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(id, quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
# Merge roads dataset by ID, then remove id
dat_roads = read.csv('../data/cleaned_distances.csv') %>% select(id, NEAR_DIST)
dat1_with_roads <- full_join(dat1, dat_roads, by = 'id') %>% select(-id)
dat1_with_roads$NEAR_DIST = as.numeric(dat1_with_roads$NEAR_DIST)
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, quality_group = Quality_group.1, management_group = Management, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group','quality_group','management_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
# Add median road distance from dat1 as distance to nearest road for dat2 as we don't have these values
median_road_distance = median(dat1_with_roads$NEAR_DIST, na.rm = TRUE)
dat2 = dat2 %>% mutate(NEAR_DIST = median_road_distance)
dat1_with_roads$NEAR_DIST[is.na(dat1_with_roads$NEAR_DIST)] = median_road_distance
dat = bind_rows(dat1_with_roads, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST, fill = status_group), bins = 10, col = 'grey') +
labs(x = 'Population (log scale)', y = 'Number of Wells', fill = 'Status') +
ggtitle('Status of Wells by Population')  +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
# source('../code/models.R') # Takes to long to run script every time we knit this file so model results hard coded into report
library(ggplot2)
library(knitr)
library(dplyr)
library(stringr)
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST, fill = status_group), bins = 10, col = 'grey') +
labs(x = 'Population (log scale)', y = 'Number of Wells', fill = 'Status') +
ggtitle('Status of Wells by Population')  +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
summary(dat$NEAR_DIST)
summary(dat$NEAR_DIST[1:59400])
dat$NEAR_DIST[dat$NEAR_DIST > 200000] = 200000
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 15, fill = 'steelblue') +
labs(x = 'Construction Year',y='Number of Wells') +
ggtitle('Construction Year of Wells')
dat$NEAR_DIST[dat$NEAR_DIST > 50000] = 50000
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 15, fill = 'steelblue') +
labs(x = 'Construction Year',y='Number of Wells') +
ggtitle('Construction Year of Wells')
summary(dat$NEAR_DIST[1:59400]) # Take only known road distances, i.e., from the competition dataset
dat$NEAR_DIST[dat$NEAR_DIST > 50000] = 50000
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 15, fill = 'steelblue') +
labs(x = 'Construction Year',y='Number of Wells') +
ggtitle('Construction Year of Wells')
dat$NEAR_DIST[dat$NEAR_DIST > 20000] = 20000
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 15, fill = 'steelblue') +
labs(x = 'Construction Year',y='Number of Wells') +
ggtitle('Construction Year of Wells')
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 15, fill = 'steelblue') +
labs(x = 'Distance to Nearest Road',y='Number of Wells') +
ggtitle('Distance to Nearest Road of Wells')
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST, fill = status_group), bins = 10, col = 'grey') +
labs(x = 'Population (log scale)', y = 'Number of Wells', fill = 'Status') +
ggtitle('Status of Wells by Population')  +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(id, quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
# Merge roads dataset by ID, then remove id
dat_roads = read.csv('../data/cleaned_distances.csv') %>% select(id, NEAR_DIST)
dat1_with_roads <- full_join(dat1, dat_roads, by = 'id') %>% select(-id)
dat1_with_roads$NEAR_DIST = as.numeric(dat1_with_roads$NEAR_DIST)
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, quality_group = Quality_group.1, management_group = Management, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group','quality_group','management_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
# Add median road distance from dat1 as distance to nearest road for dat2 as we don't have these values
median_road_distance = median(dat1_with_roads$NEAR_DIST, na.rm = TRUE)
dat2 = dat2 %>% mutate(NEAR_DIST = median_road_distance)
dat1_with_roads$NEAR_DIST[is.na(dat1_with_roads$NEAR_DIST)] = median_road_distance
dat = bind_rows(dat1_with_roads, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
summary(dat$NEAR_DIST[1:59400]) # Take only known road distances, i.e., from the competition dataset
dat$NEAR_DIST[dat$NEAR_DIST > 50000] = 50000
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 15, fill = 'steelblue') +
labs(x = 'Distance to Nearest Road',y='Number of Wells') +
ggtitle('Distance to Nearest Road of Wells')
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST, fill = status_group), bins = 10, col = 'grey') +
labs(x = 'Distance to Nearest Road', y = 'Number of Wells', fill = 'Status') +
ggtitle('Status of Wells by Distance to Nearest Road')  +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 25, fill = 'steelblue') +
labs(x = 'Distance to Nearest Road',y='Number of Wells') +
ggtitle('Distance to Nearest Road of Wells')
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 20, fill = 'steelblue') +
labs(x = 'Distance to Nearest Road',y='Number of Wells') +
ggtitle('Distance to Nearest Road of Wells')
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 10, fill = 'steelblue') +
labs(x = 'Distance to Nearest Road',y='Number of Wells') +
ggtitle('Distance to Nearest Road of Wells')
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 15, fill = 'steelblue') +
labs(x = 'Distance to Nearest Road',y='Number of Wells') +
ggtitle('Distance to Nearest Road of Wells')
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST), bins = 20, fill = 'steelblue') +
labs(x = 'Distance to Nearest Road',y='Number of Wells') +
ggtitle('Distance to Nearest Road of Wells')
50000/20
binned_distances = cut(dat$population, breaks = seq(from = 0, to = 50000, by = 2500))
binned_distances = cut(dat$NEAR_DIST, breaks = seq(from = 0, to = 50000, by = 2500))
kable(binned_distances)
kable(summary(binned_distances))
kable(summary(binned_distances), col.names = c('Number of Wells'), caption = 'Distance to Nearest Road for Wells')
summary(binned_distances)
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST, fill = status_group), bins = 10, col = 'grey') +
labs(x = 'Distance to Nearest Road', y = 'Number of Wells', fill = 'Status') +
ggtitle('Status of Wells by Distance to Nearest Road')  +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
35/110
ggplot(data = dat[1:59400]) +
geom_histogram(aes(x = NEAR_DIST, fill = status_group), bins = 10, col = 'grey') +
labs(x = 'Distance to Nearest Road', y = 'Number of Wells', fill = 'Status') +
ggtitle('Status of Wells by Distance to Nearest Road')  +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat) +
geom_histogram(aes(x = NEAR_DIST[1:59400], fill = status_group), bins = 10, col = 'grey') +
labs(x = 'Distance to Nearest Road', y = 'Number of Wells', fill = 'Status') +
ggtitle('Status of Wells by Distance to Nearest Road')  +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat[1:59400]) +
geom_histogram(aes(x = NEAR_DIST[1:59400], fill = status_group), bins = 10, col = 'grey') +
labs(x = 'Distance to Nearest Road', y = 'Number of Wells', fill = 'Status') +
ggtitle('Status of Wells by Distance to Nearest Road')  +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat[1:59400,]) +
geom_histogram(aes(x = NEAR_DIST[1:59400], fill = status_group), bins = 10, col = 'grey') +
labs(x = 'Distance to Nearest Road', y = 'Number of Wells', fill = 'Status') +
ggtitle('Status of Wells by Distance to Nearest Road')  +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat[1:59400,]) +
geom_histogram(aes(x = NEAR_DIST[1:59400]), bins = 20, fill = 'steelblue') +
labs(x = 'Distance to Nearest Road',y='Number of Wells') +
ggtitle('Distance to Nearest Road of Wells')
binned_distances = cut(dat$NEAR_DIST[1:59400], breaks = seq(from = 0, to = 50000, by = 2500))
kable(summary(binned_distances), col.names = c('Number of Wells'), caption = 'Distance to Nearest Road for Wells')
12/31
6/15
11/31
