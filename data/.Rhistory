dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
library(ggplot2)
library(dplyr)
# Working Directory: taarifa/folder (such as report or code or data)
dat <- read.csv('../data/taarifa.csv', stringsAsFactors = FALSE)
prop_non_functional = round(nrow(dat %>% filter(status_group == 'non functional'))/nrow(dat)*100,2)
# Finds the proportion of wells by a given category label
find_prop <- function(label, data = dat){
total = data %>% group_by_(label) %>% summarise(total_number = n())
counts = data %>% group_by_(label, 'status_group') %>% summarise(number_of_wells = n())
counts = full_join(counts, total, by = label) %>% mutate(prop = round(number_of_wells/total_number*100, 2))
return(counts)
}
find_prop('extraction_type')
# Store proportions in a list
discrete_categories = c('quantity','extraction_type', 'waterpoint_type', 'payment','source_type') # Name of columns with discrete variables
dat_proportions = numeric()
for(col in discrete_categories){
dat_proportions = c(dat_proportions, list(find_prop(col)))
}
names(dat_proportions) <- discrete_categories
dat_proportions
ggplot(data = dat_proportions$quantity) +
geom_col(aes(x = quantity, y = prop, fill = status_group)) +
labs(x = 'Water Quantity', fill = 'Status', y = 'Percentage of Waterpoints') +
ggtitle('Status of Waterpoints by Water Quantity') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
dat_year = dat %>% filter(construction_year != 0) %>% filter(construction_year != 'unknown')
dat_population = dat %>% filter(population != 0) %>% filter(population != 'unknown')
nrow(dat %>% filter(waterpoint_type == 'unknown'))/nrow(dat)
nrow(dat_year)/nrow(dat)
nrow(dat_population)/nrow(dat)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source_type = str_replace_all(dat1$source_type, pattern = "river|lake", replacement = "river/lake")
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
dat = bind_rows(dat1, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
library(ggplot2)
library(dplyr)
# Working Directory: taarifa/folder (such as report or code or data)
dat <- read.csv('../data/taarifa.csv', stringsAsFactors = FALSE)
prop_non_functional = round(nrow(dat %>% filter(status_group == 'non functional'))/nrow(dat)*100,2)
# Finds the proportion of wells by a given category label
find_prop <- function(label, data = dat){
total = data %>% group_by_(label) %>% summarise(total_number = n())
counts = data %>% group_by_(label, 'status_group') %>% summarise(number_of_wells = n())
counts = full_join(counts, total, by = label) %>% mutate(prop = round(number_of_wells/total_number*100, 2))
return(counts)
}
find_prop('extraction_type')
# Store proportions in a list
discrete_categories = c('quantity','extraction_type', 'waterpoint_type', 'payment','source_type') # Name of columns with discrete variables
dat_proportions = numeric()
for(col in discrete_categories){
dat_proportions = c(dat_proportions, list(find_prop(col)))
}
names(dat_proportions) <- discrete_categories
dat_proportions
ggplot(data = dat_proportions$quantity) +
geom_col(aes(x = quantity, y = prop, fill = status_group)) +
labs(x = 'Water Quantity', fill = 'Status', y = 'Percentage of Waterpoints') +
ggtitle('Status of Waterpoints by Water Quantity') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
dat_year = dat %>% filter(construction_year != 0) %>% filter(construction_year != 'unknown')
dat_population = dat %>% filter(population != 0) %>% filter(population != 'unknown')
nrow(dat %>% filter(waterpoint_type == 'unknown'))/nrow(dat)
nrow(dat_year)/nrow(dat)
nrow(dat_population)/nrow(dat)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(quantity, extraction_type, waterpoint_type,
construction_year, payment, source, population, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source = str_replace_all(dat1$source, pattern = "river|lake", replacement = "river/lake")
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source = Source_group, population = Pop_served, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source','status_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
dat = bind_rows(dat1, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(quantity, extraction_type, waterpoint_type,
construction_year, payment, source, population, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source = str_replace_all(dat1$source, pattern = "river|lake", replacement = "river/lake")
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source = Source_group, population = Pop_served, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source','status_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
dat = bind_rows(dat1, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(quantity, extraction_type, waterpoint_type,
construction_year, payment, source_group, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source = str_replace_all(dat1$source, pattern = "river|lake", replacement = "river/lake")
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source = str_replace_all(dat1$source, pattern = "river|lake", replacement = "river/lake")
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, quality_group = Quality_group.1, management_group = Management, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source','status_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
dat = bind_rows(dat1, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
library(ggplot2)
library(dplyr)
# Working Directory: taarifa/folder (such as report or code or data)
dat <- read.csv('../data/taarifa.csv', stringsAsFactors = FALSE)
prop_non_functional = round(nrow(dat %>% filter(status_group == 'non functional'))/nrow(dat)*100,2)
# Finds the proportion of wells by a given category label
find_prop <- function(label, data = dat){
total = data %>% group_by_(label) %>% summarise(total_number = n())
counts = data %>% group_by_(label, 'status_group') %>% summarise(number_of_wells = n())
counts = full_join(counts, total, by = label) %>% mutate(prop = round(number_of_wells/total_number*100, 2))
return(counts)
}
find_prop('extraction_type')
View(dat)
# Store proportions in a list
discrete_categories = c('quantity','extraction_type', 'waterpoint_type', 'payment','source_type','quality_group','management_group') # Name of columns with discrete variables
dat_proportions = numeric()
for(col in discrete_categories){
dat_proportions = c(dat_proportions, list(find_prop(col)))
}
names(dat_proportions) <- discrete_categories
dat_proportions
ggplot(data = dat_proportions$quantity) +
geom_col(aes(x = quantity, y = prop, fill = status_group)) +
labs(x = 'Water Quantity', fill = 'Status', y = 'Percentage of Waterpoints') +
ggtitle('Status of Waterpoints by Water Quantity') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
dat_proportions$source_type
ggplot(data = dat_proportions$source_type) +
geom_col(aes(x = source_type, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Source') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3)) +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat_proportions$source_type) +
geom_col(aes(x = source_type, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Source') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3)) +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
View(dat)
ggplot(data = dat_proportions$quality_group) +
geom_col(aes(x = quality_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Water Quality') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3)) +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source = str_replace_all(dat1$source, pattern = "river|lake", replacement = "river/lake")
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, quality_group = Quality_group.1, management_group = Management, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group','quality_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
dat = bind_rows(dat1, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
library(ggplot2)
library(dplyr)
# Working Directory: taarifa/folder (such as report or code or data)
dat <- read.csv('../data/taarifa.csv', stringsAsFactors = FALSE)
prop_non_functional = round(nrow(dat %>% filter(status_group == 'non functional'))/nrow(dat)*100,2)
# Finds the proportion of wells by a given category label
find_prop <- function(label, data = dat){
total = data %>% group_by_(label) %>% summarise(total_number = n())
counts = data %>% group_by_(label, 'status_group') %>% summarise(number_of_wells = n())
counts = full_join(counts, total, by = label) %>% mutate(prop = round(number_of_wells/total_number*100, 2))
return(counts)
}
find_prop('extraction_type')
# Store proportions in a list
discrete_categories = c('quantity','extraction_type', 'waterpoint_type', 'payment','source_type','quality_group','management_group') # Name of columns with discrete variables
dat_proportions = numeric()
for(col in discrete_categories){
dat_proportions = c(dat_proportions, list(find_prop(col)))
}
names(dat_proportions) <- discrete_categories
dat_proportions
ggplot(data = dat_proportions$quantity) +
geom_col(aes(x = quantity, y = prop, fill = status_group)) +
labs(x = 'Water Quantity', fill = 'Status', y = 'Percentage of Waterpoints') +
ggtitle('Status of Waterpoints by Water Quantity') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
dat_year = dat %>% filter(construction_year != 0) %>% filter(construction_year != 'unknown')
dat_population = dat %>% filter(population != 0) %>% filter(population != 'unknown')
nrow(dat %>% filter(waterpoint_type == 'unknown'))/nrow(dat)
nrow(dat_year)/nrow(dat)
nrow(dat_population)/nrow(dat)
ggplot(data = dat %>% group_by(source_type) %>% summarise(count = n()), aes(x = source_type, y = count)) +
geom_bar(stat = "identity", fill = 'steelblue') +
labs(x= '',y = 'Number of Wells') +
ggtitle('Number of Wells by Source') +
geom_text(aes(label=count), vjust=-0.3, size=2) +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3))
ggplot(data = dat_proportions$quality_group) +
geom_col(aes(x = quality_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Water Quality') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3)) +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat_proportions$quality_group) +
geom_col(aes(x = quality_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Water Quality') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3)) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat_proportions$quality_group) +
geom_col(aes(x = quality_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Water Quality') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat_proportions$quality_group) +
geom_col(aes(x = quality_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Water Quality') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 2) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat_proportions$quality_group) +
geom_col(aes(x = quality_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Water Quality') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 1) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat_proportions$quality_group) +
geom_col(aes(x = quality_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Water Quality') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
geom_text(aes(x = 0.5, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat_proportions$quality_group) +
geom_col(aes(x = quality_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Water Quality') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
geom_text(aes(x = 0.8, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat %>% group_by(quality_group) %>% summarise(count = n()), aes(x = source_type, y = count)) +
geom_bar(stat = "identity", fill = 'steelblue') +
labs(x= '',y = 'Number of Wells') +
ggtitle('Number of Wells by Water Quality') +
geom_text(aes(label=count), vjust=-0.3, size=2)
ggplot(data = dat %>% group_by(quality_group) %>% summarise(count = n()), aes(x = quality_group, y = count)) +
geom_bar(stat = "identity", fill = 'steelblue') +
labs(x= '',y = 'Number of Wells') +
ggtitle('Number of Wells by Water Quality') +
geom_text(aes(label=count), vjust=-0.3, size=2)
kable(dat_proportions$quality_group %>% filter(status_group == 'non functional') %>% arrange(desc(prop)) %>% select(quality_group, number_of_wells, prop),col.names = c('Water Quality','Number of Non-Functional Wells', 'Percentage of Non-Functional Wells'), caption = 'Percentage of Non-Functional Wells by Water Quality')
library(knitr)
kable(dat_proportions$quality_group %>% filter(status_group == 'non functional') %>% arrange(desc(prop)) %>% select(quality_group, number_of_wells, prop),col.names = c('Water Quality','Number of Non-Functional Wells', 'Percentage of Non-Functional Wells'), caption = 'Percentage of Non-Functional Wells by Water Quality')
ggplot(data = dat_proportions$management_group) +
geom_col(aes(x = management_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Source') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3)) +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
library(dplyr)
library(stringr)
# First Dataset: From Taarifa Contest (training set data)
training_values <- read.csv('../data/training_set.csv', stringsAsFactors = FALSE)
training_labels <- read.csv('../data/training_labels.csv', stringsAsFactors = FALSE)
dat1 <- full_join(training_values, training_labels, by = 'id') %>% select(quantity, extraction_type, waterpoint_type,
construction_year, payment, source_type, population,
quality_group, management_group, status_group)
# Select most important features that are replicable across different countries + well status
dat1$construction_year = as.integer(dat1$construction_year)
# Edit for consistency with dat2
dat1$payment = str_replace_all(dat1$payment, pattern = "pay when scheme fails", replacement = "on failure")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay per bucket", replacement = "per bucket")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay monthly", replacement = "monthly")
dat1$payment = str_replace_all(dat1$payment, pattern = "pay annually", replacement = "annually")
dat1$source = str_replace_all(dat1$source, pattern = "river|lake", replacement = "river/lake")
# Second Dataset: Found from Taarifa API
dat2 = read.csv('../data/merged.csv', stringsAsFactors = FALSE)
dat2 = dat2 %>% mutate(waterpoint_type = "unknown")
dat2 = dat2 %>% select(Quality_group, Extraction_group, waterpoint_type, Construction_year, Payment_group,
Source_group, Pop_served, Quality_group.1, Management, Status_group) # Missing waterpoint type
dat2 = dat2 %>% rename(quantity = Quality_group, extraction_type = Extraction_group, construction_year = Construction_year, payment = Payment_group,
source_type = Source_group, population = Pop_served, quality_group = Quality_group.1, management_group = Management, status_group = Status_group)
dat2$construction_year = as.integer(dat2$construction_year)
dat2$status_group = str_replace_all(dat2$status_group, pattern = "not functional", replacement = "non functional")
dat2$status_group = str_replace_all(dat2$status_group, pattern = "needs repair", replacement = "functional needs repair")
dat2$payment = str_replace_all(dat2$payment, pattern = "never pays", replacement = "never pay")
# Remove empty cells and replace with 'unknown' (only really 1 observation at present)
for (col in c('quantity','extraction_type','payment','source_type','status_group','quality_group','management_group')) {
dat2[dat2[,col] == '',col] = 'unknown'
}
dat = bind_rows(dat1, dat2)
dat[is.na(dat)] <- "unknown" # Change all missing values to "unknown" for ML models
write.csv(dat, file = '../data/taarifa.csv', row.names = FALSE)
library(ggplot2)
library(dplyr)
# Working Directory: taarifa/folder (such as report or code or data)
dat <- read.csv('../data/taarifa.csv', stringsAsFactors = FALSE)
prop_non_functional = round(nrow(dat %>% filter(status_group == 'non functional'))/nrow(dat)*100,2)
# Finds the proportion of wells by a given category label
find_prop <- function(label, data = dat){
total = data %>% group_by_(label) %>% summarise(total_number = n())
counts = data %>% group_by_(label, 'status_group') %>% summarise(number_of_wells = n())
counts = full_join(counts, total, by = label) %>% mutate(prop = round(number_of_wells/total_number*100, 2))
return(counts)
}
find_prop('extraction_type')
# Store proportions in a list
discrete_categories = c('quantity','extraction_type', 'waterpoint_type', 'payment','source_type','quality_group','management_group') # Name of columns with discrete variables
dat_proportions = numeric()
for(col in discrete_categories){
dat_proportions = c(dat_proportions, list(find_prop(col)))
}
names(dat_proportions) <- discrete_categories
dat_proportions
ggplot(data = dat_proportions$quantity) +
geom_col(aes(x = quantity, y = prop, fill = status_group)) +
labs(x = 'Water Quantity', fill = 'Status', y = 'Percentage of Waterpoints') +
ggtitle('Status of Waterpoints by Water Quantity') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
dat_year = dat %>% filter(construction_year != 0) %>% filter(construction_year != 'unknown')
dat_population = dat %>% filter(population != 0) %>% filter(population != 'unknown')
nrow(dat %>% filter(waterpoint_type == 'unknown'))/nrow(dat)
nrow(dat_year)/nrow(dat)
nrow(dat_population)/nrow(dat)
ggplot(data = dat_proportions$management_group) +
geom_col(aes(x = management_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Source') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3)) +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat_proportions$management_group) +
geom_col(aes(x = management_group, y = prop, fill = status_group)) +
labs(x = '', fill = 'Status', y = 'Percentage') +
ggtitle('Status of Wells by Source') +
geom_hline(aes(yintercept = prop_non_functional), size = 1, linetype = 'dashed') +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3)) +
geom_text(aes(x = 1, y = prop_non_functional, label = 'Average'), size = 3, nudge_y = 3) +
scale_fill_manual(values = c('#00BA38','#619CFF','#F8766D')) # default ggplot2 colours in green-blue-red
ggplot(data = dat %>% group_by(management_group) %>% summarise(count = n()), aes(x = management_group, y = count)) +
geom_bar(stat = "identity", fill = 'steelblue') +
labs(x= '',y = 'Number of Wells') +
ggtitle('Number of Wells by Source') +
geom_text(aes(label=count), vjust=-0.3, size=2) +
theme(axis.text.x = element_text(angle = 90, hjust= 1, vjust = 0.3))
kable(dat_proportions$management_group %>% filter(status_group == 'non functional') %>% arrange(desc(prop)) %>% select(management_group, number_of_wells, prop),col.names = c('Source','Number of Non-Functional Wells', 'Percentage of Non-Functional Wells'), caption = 'Percentage of Non-Functional Wells by Source')
